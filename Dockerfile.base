# Base Image (ci-base)

FROM ubuntu:24.04

ARG USERNAME=user
ARG UID=1000
ARG GID=1000
ARG PYTHON_VENV_PATH=/opt/python/venv
ARG UBUNTU_MIRROR_ARCHIVE=archive.ubuntu.com/ubuntu
ARG UBUNTU_MIRROR_SECURITY=security.ubuntu.com/ubuntu
ARG UBUNTU_MIRROR_PORTS=ports.ubuntu.com/ubuntu-ports

# this conflicts with uid 1000, remove it
RUN userdel -r ubuntu || true

# Set default shell during Docker image build to bash
SHELL ["/bin/bash", "-eo", "pipefail", "-c"]

# Set non-interactive frontend for apt-get to skip any user confirmations
ENV DEBIAN_FRONTEND=noninteractive

# Set up Ubuntu mirrors
RUN <<EOF
	sed -i "s#archive.ubuntu.com/ubuntu#${UBUNTU_MIRROR_ARCHIVE}#" /etc/apt/sources.list.d/ubuntu.sources
	sed -i "s#security.ubuntu.com/ubuntu#${UBUNTU_MIRROR_SECURITY}#" /etc/apt/sources.list.d/ubuntu.sources
	sed -i "s#ports.ubuntu.com/ubuntu-ports#${UBUNTU_MIRROR_PORTS}#" /etc/apt/sources.list.d/ubuntu.sources
EOF

# Install APT packages
RUN <<EOF
	# Enable 32-bit package support for x86-64
	if [ "${HOSTTYPE}" = "x86_64" ]; then
		dpkg --add-architecture i386
	fi

	# Upgrade system packages
	apt-get -y update
	apt-get -y upgrade

	# Install base packages
	apt-get install --no-install-recommends -y \
		software-properties-common \
		lsb-release \
		autoconf \
		automake \
		bison \
		build-essential \
		ca-certificates \
		ccache \
		chrpath \
		cmake \
		cpio \
		device-tree-compiler \
		dfu-util \
		diffstat \
		dos2unix \
		doxygen \
		file \
		flex \
		g++ \
		gawk \
		gcc \
		gcovr \
		gdb \
		git \
		git-core \
		gnupg \
		gperf \
		help2man \
		iproute2 \
		lcov \
		libcairo2-dev \
		libglib2.0-dev \
		libgtk2.0-0 \
		liblocale-gettext-perl \
		libncurses5-dev \
		libpcap-dev \
		libpopt0 \
		libsdl1.2-dev \
		libsdl2-dev \
		libssl-dev \
		libtool \
		libtool-bin \
		locales \
		make \
		net-tools \
		ninja-build \
		openssh-client \
		parallel \
		pkg-config \
		rsync \
		socat \
		srecord \
		sudo \
		texinfo \
		unzip \
		valgrind \
		wget \
		ovmf \
		xz-utils \
		thrift-compiler

	# Install x86-64 image-specific packages
	if [ "${HOSTTYPE}" = "x86_64" ]; then
		# Install multi-lib gcc
		apt-get install --no-install-recommends -y \
			gcc-multilib \
			g++-multilib

		# Install 32-bit dependencies
		apt-get install --no-install-recommends -y \
			libc6-dbg:i386 \
			libfuse-dev:i386 \
			libsdl2-dev:i386

		# Ensure that software-properties-common is installed because
		# it may be removed by the above step
		apt-get install --no-install-recommends -y \
			software-properties-common
	fi

	# Install Python
	apt-get install --no-install-recommends -y \
		python3 \
		python3-dev \
		python3-pip \
		python3-ply \
		python3-setuptools \
		python3-venv \
		python-is-python3

	# Clean up stale packages
	apt-get autoremove --purge -y

	# Clean up local repository
	apt-get clean -y
	rm -rf /var/lib/apt/lists/*
EOF

# Initialise system locale
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

RUN <<EOF
	mkdir -p ${PYTHON_VENV_PATH}
	python3 -m venv ${PYTHON_VENV_PATH}
EOF

ENV PATH=${PYTHON_VENV_PATH}/bin:$PATH

RUN <<EOF
	cd ${PYTHON_VENV_PATH}/bin
	pip install --no-cache-dir --upgrade pip setuptools wheel
EOF

# Install Python dependencies
RUN pip3 install --no-cache-dir \
		-r https://raw.githubusercontent.com/zephyrproject-rtos/zephyr/main/scripts/requirements.txt \
		-r https://raw.githubusercontent.com/zephyrproject-rtos/mcuboot/main/scripts/requirements.txt \
		GitPython imgtool junitparser junit2html numpy protobuf grpcio-tools PyGithub \
		pylint sh statistics west \
		nrf-regtool~=9.0.1

# Run pip check on x86 only for now, it fails on arm.
RUN <<EOF
	if [ "${HOSTTYPE}" = "x86_64" ]; then
		pip3 check
	fi
EOF

# Create 'user' account
RUN groupadd -g $GID -o $USERNAME

RUN <<EOF
	useradd -u $UID -m -g $USERNAME -G plugdev $USERNAME
	echo $USERNAME ' ALL = NOPASSWD: ALL' > /etc/sudoers.d/$USERNAME
	chmod 0440 /etc/sudoers.d/$USERNAME
EOF

USER root
